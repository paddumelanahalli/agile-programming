file: calculator.feature
Feature: Calculator
 	As an author of this article
 	I want to demonstrate
 	How to write a simple test using behave
 		with a calculator as an example


	Scenario: Add two numbers
		Given I have entered 2 into the calculator
		And I have also entered 7 into the calculator
		When I press add
		Then the sum should be 9

	    Scenario Outline: Add any two numbers
        Given I have entered <number1> into the calculator
        And I have also entered <number2> into the calculator
        When I press add
        Then the sum should be <result>

        Examples:
            |  number1|  number2|   result|
            |        5|        2|        7|
            |        4|        8|       12|
            |      100|      200|      300|
            
            
            
   file: features/steps/calculator.py
   from behave import given, when, then
from calculator1 import Calculator

@given('I have entered {number1:d} into the calculator')
def enter_number1(context, number1):
    context.number1 = number1

@given('I have also entered {number2:d} into the calculator')
def enter_number2(context, number2):
    context.number2 = number2

@when('I press add')
def press_add(context):
    context.calculator = Calculator()
    context.result = context.calculator.add(context.number1, context.number2)

@then('the sum should be {result:d}')
def check_result(context, result):
    assert context.result == result
    
    
 file: features/steps/calculator1.py
 class Calculator(object):
    def add(self, x, y):
        return x + y
